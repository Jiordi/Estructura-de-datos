
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Highlighter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author SB-D1
 */
public class Analyzador extends javax.swing.JFrame {

    /**
     * Creates new form Analyzador
     */
    public Analyzador() {
        initComponents();
        this.setLocationRelativeTo(null);
        m = (DefaultTableModel) tblToken.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnAnalizar = new javax.swing.JButton();
        pnlPrincipal = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblToken = new javax.swing.JTable();
        pnlArbol = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtEditor = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnNuevo = new javax.swing.JMenuItem();
        btnAbrir = new javax.swing.JMenuItem();
        btnGuardar = new javax.swing.JMenuItem();
        btnGuardarComo = new javax.swing.JMenuItem();
        btnSalir = new javax.swing.JMenuItem();
        mnuAnalizar = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToolBar1.setRollover(true);

        btnAnalizar.setText("Analizar");
        btnAnalizar.setFocusable(false);
        btnAnalizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAnalizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAnalizar);

        getContentPane().add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 20));

        pnlPrincipal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblToken.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Tipo"
            }
        ));
        jScrollPane2.setViewportView(tblToken);

        pnlPrincipal.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, 160, 350));

        pnlArbol.setBorder(javax.swing.BorderFactory.createTitledBorder("Arbol Sintactico"));

        javax.swing.GroupLayout pnlArbolLayout = new javax.swing.GroupLayout(pnlArbol);
        pnlArbol.setLayout(pnlArbolLayout);
        pnlArbolLayout.setHorizontalGroup(
            pnlArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );
        pnlArbolLayout.setVerticalGroup(
            pnlArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 147, Short.MAX_VALUE)
        );

        pnlPrincipal.add(pnlArbol, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        txtEditor.setColumns(20);
        txtEditor.setRows(5);
        txtEditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEditorKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtEditor);

        pnlPrincipal.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 400, 160));

        getContentPane().add(pnlPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 620, 420));

        jMenu1.setText("File");

        btnNuevo.setText("Nuevo ");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(btnNuevo);

        btnAbrir.setText("Abrir");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(btnAbrir);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(btnGuardar);

        btnGuardarComo.setText("Guardar como");
        btnGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(btnGuardarComo);

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jMenu1.add(btnSalir);

        jMenuBar1.add(jMenu1);

        mnuAnalizar.setText("Analizar");
        jMenuBar1.add(mnuAnalizar);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        analizar(txtEditor.getText());
    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        if (a != null && e == true) {
            Object[] opciones = {"Guardar", "No guardar", "Cancelar"};
            int eleccion = JOptionPane.showOptionDialog(this, "Quieres guardar los cambios en " + getTitle(), "Mensaje de Confirmacion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, opciones, "Guardar");
            if (eleccion == 0) {
                guardar();
            } else if (eleccion == 2) {
                return;
            }
        } else if (e == true) {
            guardar();
        }
        if (c == true) {
            return;
        }
        c = false;
        a = null;
        setTitle("Sin Titulo");
        txtEditor.setText("");
        e = false;
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void txtEditorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEditorKeyPressed
                if (Character.isDefined(evt.getKeyChar())) {
            e = true;
        }
        Highlighter h = txtEditor.getHighlighter();
        h.removeAllHighlights();
    }//GEN-LAST:event_txtEditorKeyPressed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
       if (a != null && e == true) {
            Object[] opciones = {"Guardar", "No guardar", "Cancelar"};
            int eleccion = JOptionPane.showOptionDialog(this, "Quieres guardar los cambios en " + getTitle(), "Mensaje de Confirmacion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, opciones, "Guardar");
            switch (eleccion) {
                case 0:
                    guardar();
                    break;
                case 1:
                    txtEditor.setText("");
                    break;
                case 2:
                    return;
                default:
                    break;
            }
        } else if (a == null && e == true) {
            Object[] opciones = {"Guardar", "No guardar", "Cancelar"};
            int eleccion = JOptionPane.showOptionDialog(this, "Quieres guardar el archivo " + getTitle(), "Mensaje de Confirmacion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, opciones, "Guardar");
            switch (eleccion) {
                case 0:
                    guardar();
                    break;
                case 1:
                    txtEditor.setText("");
                    break;
                case 2:
                    return;
                default:
                    break;
            }
            c = false;
        }
        try {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Analizador", "anl");
            chooser.setFileFilter(filter);
            int returnVal = chooser.showOpenDialog(this);
            if (returnVal == JFileChooser.ABORT) {
                txtEditor.setText("");
                a = null;
            }
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File archivo = chooser.getSelectedFile();
                Charset charset = Charset.forName("ISO-8859-1");
                setTitle(archivo.getName());
                a = archivo;
                txtEditor.setText("");
                List<String> tex = Files.readAllLines(archivo.toPath(), charset);
                for (String line : tex) {
                    txtEditor.setText(txtEditor.getText() + line + "\n");
                }
                e = false;
                return;
            }
        } catch (FileNotFoundException ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (IOException ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
       

        c = false;
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
           if (a == null) {
            guardarComo();
            return;
        }
        guardar();
        e = false;
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void guardarComo(){
          try {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Analizador", "anl");
            chooser.setFileFilter(filter);
            chooser.setDialogTitle("Guardar");
            chooser.setSelectedFile(new File(getTitle()));
            int returnVal = chooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File archivo = chooser.getSelectedFile();
                java.io.FileWriter tw = new java.io.FileWriter(archivo);
                tw.write(txtEditor.getText());
                tw.flush();
                a = archivo;
                setTitle(a.getName());
                c = false;
                e = false;
            }
        } catch (FileNotFoundException ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (IOException ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }
    private void btnGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarComoActionPerformed
         guardarComo();
    }//GEN-LAST:event_btnGuardarComoActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        if (a != null && e == true) {
            Object[] opciones = {"Guardar", "No guardar", "Cancelar"};
            int eleccion = JOptionPane.showOptionDialog(this, "Quieres guardar los cambios en " + getTitle(), "Mensaje de Confirmacion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, opciones, "Guardar");
            if (eleccion == 0) {
                guardar();
                System.exit(0);
            }

            if (eleccion == 1) {
                System.exit(0);
            }
            if (eleccion == 2) {
                return;
            }
        } else if (e == true) {
            guardar();
            if (c == true) {
                c = false;
                return;
            } else {
                System.exit(0);
            }
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_btnSalirActionPerformed
    
    private void guardar() {
        if (a != null) {
            try {
                java.io.FileWriter tw = new java.io.FileWriter(a);
                tw.write(txtEditor.getText());
                tw.flush();
                e = false;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Analyzador.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Analyzador.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (e == true) {
            Object[] opciones = {"Guardar", "No guardar", "Cancelar"};
            int eleccion = JOptionPane.showOptionDialog(this, "Quieres guardar el archivo " + getTitle(), "Mensaje de Confirmacion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, opciones, "Guardar");
            if (eleccion == 0) {
                try {
                    JFileChooser chooser = new JFileChooser();
                    FileNameExtensionFilter filter = new FileNameExtensionFilter(
                            "Analizador", "anl");
                    chooser.setFileFilter(filter);
                    chooser.setDialogTitle("Guardar");
                    chooser.setSelectedFile(new File(getTitle() ));
                    int returnVal = chooser.showSaveDialog(this);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File archivo = chooser.getSelectedFile();
                        java.io.FileWriter tw = new java.io.FileWriter(archivo+".anl");
                        tw.write(txtEditor.getText());
                        tw.flush();
                    }
                } catch (FileNotFoundException ex) {
                    javax.swing.JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                } catch (IOException ex) {
                    javax.swing.JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                }
            } else if (eleccion == 1) {
                setTitle("Sin Titulo");
            } else {
                c = true;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Analyzador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Analyzador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Analyzador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Analyzador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Analyzador().setVisible(true);
            }
        });
    }

    public void analizar(String cad) {
        String pal = "";
        m.setRowCount(0);
        Object O[] = new Object[2];
        for (int i = 0; i < cad.length(); i++) {
            String c = cad.substring(i, i + 1);
            if (esOp(c) == -1) {
                pal += c;
            } else if (Grafos.esEntero(pal)) {
                O[0] = pal;
                O[1] = "Entero";
                m.addRow(O);
                O[0] = c;
                O[1] = "op";
                m.addRow(O);
                pal = "";
            } else if (Grafos.esFloat(pal)) {
                O[0] = pal;
                O[1] = "Float";
                m.addRow(O);
                O[0] = c;
                O[1] = "op";
                m.addRow(O);
                pal = "";
            } else if (Grafos.esHexa(pal)) {
                O[0] = pal;
                O[1] = "Hexa";
                m.addRow(O);
                O[0] = c;
                O[1] = "op";
                m.addRow(O);
                pal = "";
            } else if (Grafos.esIde(pal)) {
                O[0] = pal;
                O[1] = "Ide";
                m.addRow(O);
                O[0] = c;
                O[1] = "op";
                m.addRow(O);
                pal = "";
            }
        }
    }

    public int esOp(String c) {
        String OP[] = {"=", "+", "-", "*", "/", ";"};
        for (int i = 0; i < OP.length; i++) {
            if (c.equals(OP[i])) {
                return i;
            }
        }
        return -1;
    }

    private DefaultTableModel m;

    private boolean e = false;
    private File a = null;
    private boolean c = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btnAbrir;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JMenuItem btnGuardar;
    private javax.swing.JMenuItem btnGuardarComo;
    private javax.swing.JMenuItem btnNuevo;
    private javax.swing.JMenuItem btnSalir;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenu mnuAnalizar;
    private javax.swing.JPanel pnlArbol;
    private javax.swing.JPanel pnlPrincipal;
    private javax.swing.JTable tblToken;
    private javax.swing.JTextArea txtEditor;
    // End of variables declaration//GEN-END:variables
}

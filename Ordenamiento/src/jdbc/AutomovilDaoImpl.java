/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.mycompany.myapp.jdbc;

import com.mycompany.myapp.dao.*;
import com.mycompany.myapp.factory.*;
import com.mycompany.myapp.dto.*;
import com.mycompany.myapp.exceptions.*;
import dto.AutomovilPk;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class AutomovilDaoImpl extends AbstractDAO implements AutomovilDao {

    /**
     * The factory class for this DAO has two versions of the create() method -
     * one that takes no arguments and one that takes a Connection argument. If
     * the Connection version is chosen then the connection will be stored in
     * this attribute and will be used by all calls to this DAO, otherwise a new
     * Connection will be allocated for each operation.
     */
    protected java.sql.Connection userConn;

    /**
     * All finder methods in this class use this SELECT constant to build their
     * queries
     */
    protected final String SQL_SELECT = "SELECT tipo, marca, modelo, año, color, precio FROM " + getTableName() + "";

    /**
     * Finder methods will pass this value to the JDBC setMaxRows method
     */
    protected int maxRows;

    /**
     * SQL INSERT statement for this table
     */
    protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( tipo, marca, modelo, año, color, precio ) VALUES ( ?, ?, ?, ?, ?, ? )";
    protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE automovilcol = ?";
    /**
     * Index of column tipo
     */
    protected static final int COLUMN_TIPO = 1;

    /**
     * Index of column marca
     */
    protected static final int COLUMN_MARCA = 2;

    /**
     * Index of column modelo
     */
    protected static final int COLUMN_MODELO = 3;

    /**
     * Index of column año
     */
    protected static final int COLUMN_AñO = 4;

    /**
     * Index of column color
     */
    protected static final int COLUMN_COLOR = 5;

    /**
     * Index of column precio
     */
    protected static final int COLUMN_PRECIO = 6;

    /**
     * Number of columns
     */
    protected static final int NUMBER_OF_COLUMNS = 6;

    /**
     * Inserts a new row in the automovil table.
     */	
    public void delete(AutomovilPk pk) throws AutomovilDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getAutomovilcol() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new AutomovilDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
    public void insert(Automovil dto) throws AutomovilDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            stmt = conn.prepareStatement(SQL_INSERT);
            int index = 1;
            stmt.setString(index++, dto.getTipo());
            stmt.setString(index++, dto.getMarca());
            stmt.setString(index++, dto.getModelo());
            if (dto.isAñoNull()) {
                stmt.setNull(index++, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(index++, dto.getAño());
            }

            stmt.setString(index++, dto.getColor());
            if (dto.isPrecioNull()) {
                stmt.setNull(index++, java.sql.Types.FLOAT);
            } else {
                stmt.setFloat(index++, dto.getPrecio());
            }

            System.out.println("Executing " + SQL_INSERT + " with DTO: " + dto);
            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
            reset(dto);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new AutomovilDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Returns all rows from the automovil table that match the criteria ''.
     */
    public Automovil[] findAll() throws AutomovilDaoException {
        return findByDynamicSelect(SQL_SELECT, null);
    }

    /**
     * Returns all rows from the automovil table that match the criteria 'tipo =
     * :tipo'.
     */
    public Automovil[] findWhereTipoEquals(String tipo) throws AutomovilDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE tipo = ? ORDER BY tipo", new Object[]{tipo});
    }

    /**
     * Returns all rows from the automovil table that match the criteria 'marca
     * = :marca'.
     */
    public Automovil[] findWhereMarcaEquals(String marca) throws AutomovilDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE marca = ? ORDER BY marca", new Object[]{marca});
    }

    /**
     * Returns all rows from the automovil table that match the criteria 'modelo
     * = :modelo'.
     */
    public Automovil[] findWhereModeloEquals(String modelo) throws AutomovilDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE modelo = ? ORDER BY modelo", new Object[]{modelo});
    }

    /**
     * Returns all rows from the automovil table that match the criteria 'año =
     * :año'.
     */
    public Automovil[] findWhereAñoEquals(int año) throws AutomovilDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE año = ? ORDER BY año", new Object[]{new Integer(año)});
    }

    /**
     * Returns all rows from the automovil table that match the criteria 'color
     * = :color'.
     */
    public Automovil[] findWhereColorEquals(String color) throws AutomovilDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE color = ? ORDER BY color", new Object[]{color});
    }

    /**
     * Returns all rows from the automovil table that match the criteria 'precio
     * = :precio'.
     */
    public Automovil[] findWherePrecioEquals(float precio) throws AutomovilDaoException {
        return findByDynamicSelect(SQL_SELECT + " WHERE precio = ? ORDER BY precio", new Object[]{new Float(precio)});
    }

    /**
     * Method 'AutomovilDaoImpl'
     *
     */
    public AutomovilDaoImpl() {
    }

    /**
     * Method 'AutomovilDaoImpl'
     *
     * @param userConn
     */
    public AutomovilDaoImpl(final java.sql.Connection userConn) {
        this.userConn = userConn;
    }

    /**
     * Sets the value of maxRows
     */
    public void setMaxRows(int maxRows) {
        this.maxRows = maxRows;
    }

    /**
     * Gets the value of maxRows
     */
    public int getMaxRows() {
        return maxRows;
    }

    /**
     * Method 'getTableName'
     *
     * @return String
     */
    public String getTableName() {
        return "automovil.automovil";
    }

    /**
     * Fetches a single row from the result set
     */
    protected Automovil fetchSingleResult(ResultSet rs) throws SQLException {
        if (rs.next()) {
            Automovil dto = new Automovil();
            populateDto(dto, rs);
            return dto;
        } else {
            return null;
        }

    }

    /**
     * Fetches multiple rows from the result set
     */
    protected Automovil[] fetchMultiResults(ResultSet rs) throws SQLException {
        Collection resultList = new ArrayList();
        while (rs.next()) {
            Automovil dto = new Automovil();
            populateDto(dto, rs);
            resultList.add(dto);
        }

        Automovil ret[] = new Automovil[resultList.size()];
        resultList.toArray(ret);
        return ret;
    }

    /**
     * Populates a DTO with data from a ResultSet
     */
    protected void populateDto(Automovil dto, ResultSet rs) throws SQLException {
        dto.setTipo(rs.getString(COLUMN_TIPO));
        dto.setMarca(rs.getString(COLUMN_MARCA));
        dto.setModelo(rs.getString(COLUMN_MODELO));
        dto.setAño(rs.getInt(COLUMN_AñO));
        if (rs.wasNull()) {
            dto.setAñoNull(true);
        }

        dto.setColor(rs.getString(COLUMN_COLOR));
        dto.setPrecio(rs.getFloat(COLUMN_PRECIO));
        if (rs.wasNull()) {
            dto.setPrecioNull(true);
        }

    }

    /**
     * Resets the modified attributes in the DTO
     */
    protected void reset(Automovil dto) {
    }

    /**
     * Returns all rows from the automovil table that match the specified
     * arbitrary SQL statement
     */
    public Automovil[] findByDynamicSelect(String sql, Object[] sqlParams) throws AutomovilDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            final String SQL = sql;

            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
                stmt.setObject(i + 1, sqlParams[i]);
            }

            rs = stmt.executeQuery();

            // fetch the results
            return fetchMultiResults(rs);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new AutomovilDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Returns all rows from the automovil table that match the specified
     * arbitrary SQL statement
     */
    public Automovil[] findByDynamicWhere(String sql, Object[] sqlParams) throws AutomovilDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            final String SQL = SQL_SELECT + " WHERE " + sql;

            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
                stmt.setObject(i + 1, sqlParams[i]);
            }

            rs = stmt.executeQuery();

            // fetch the results
            return fetchMultiResults(rs);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new AutomovilDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public List<Automovil> extraer() throws SQLException {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        Automovil usuario = null;
        List<Automovil> usuarios = new ArrayList<>();
        try {
            conn = (this.userConn != null) ? this.userConn : ResourceManager.getConnection();
            stmt = conn.prepareStatement(SQL_SELECT);
            rs = stmt.executeQuery();
            while (rs.next()) {
                String tipo = rs.getString(1);
                String marca = rs.getString(2);
                String modelo = rs.getString(3);
                int año = rs.getInt(4);
                String color = rs.getString(5);
                float precio = rs.getFloat(6);
                usuario = new Automovil();
                usuario.setTipo(tipo);
                usuario.setModelo(modelo);
                usuario.setMarca(marca);
                usuario.setAño(año);
                usuario.setColor(color);
                usuario.setPrecio(precio);
                usuarios.add(usuario);

            }
        } finally {

        }
        return usuarios;
    }
}
